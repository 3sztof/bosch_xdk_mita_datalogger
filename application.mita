/**
 * 		Rexroth XDK micro SD sensor data logger
 *	
 * 		Author: 	K.Wilczynski
 * 		Revision:	05.2019
 */

package main;
import platforms.xdk110;


// Setup
setup XDK110 {
	applicationName = "DataLogger";			
}
setup accelerometer {
  bandwidth 			= 	BW_1000Hz; 		
  range					= 	Range_2G;
  any_motion_threshold	=	20;
  no_motion_threshold	=	20; 
} 
setup sd : SDCard {
	var writer : string = appendingTextWrite("AccelerometerData.csv");
	var cycleInit : string = rewindingTextWrite(".cycle.xdk");
	var cycleWriter : string = appendingTextWrite(".cycle.xdk");
	var cycleReader : string = rewindingTextRead(".cycle.xdk", 1);
}
setup led : LED {
	var red : bool = light_up(Red);
	var orange : bool = light_up(Orange);
	var yellow : bool = light_up(Yellow);
}


// Initialize the variables
var inactive : bool = true;
var cycle : int32;
var sCycle : string;
var orangeBlink : bool;
var orangeOn : bool = false;
var orangeBlinksRequested : int32 = 0;
var blinkCounter : int32 = 0;
var accelerationX : int32;
var accelerationY : int32;
var accelerationZ : int32;

every XDK110.startup{
	led.red.write(true);
	sd.cycleInit.write("x");
	sd.writer.write(`XDK power on \n`);
}

every button_one.pressed {
	if(inactive) {
		let ps = XDK110.powerStatus.read();
		where(ps) {
       		is(PowerStatus.Battery -> level) {
            	sd.writer.write(`Battery level: approx. ${level}% \n`);
        	}
        	is(PowerStatus.Corded) {
            	sd.writer.write(`Battery level: USB connected, charging \n`);
        	}
        }
        
        sCycle = sd.cycleReader.read();
        if(sCycle == "x"){
        	sd.cycleWriter.write("1");
        	cycle = 1;
        }
        cycle += 1;
        sd.writer.write(`Data acquisition cycle: ${cycle} \n`);
        							
		sd.writer.write(`X [raw] ; Y [raw] ; Z [raw] ; cycle time [ms] \n`);
		
		led.red.write(false);
		led.yellow.write(true);
		inactive = false;
	}
	else{
		sd.writer.write(`Data acquisition stopped \n\n\n`);
		led.red.write(true);
		led.yellow.write(false);							
		inactive = true;
	}
}

every button_two.pressed {
	/*
	  	let ps = XDK110.powerStatus.read();
	    where(ps) {
	        is(PowerStatus.Battery -> level) {
	            if(inactive){
	    			sd.writer.write(`Battery level checked by the user: approx. ${level}%`);
	    		}
	        }
	        is(PowerStatus.Corded) {
	            sd.writer.write(`Battery level checked by the user: USB connected, charging`);
	        }
	    }
	 */
    
    // Cycle number indicator
    println(`Data acquisition cycle: ${cycle}`);
    orangeBlinksRequested = cycle;
    orangeBlink = true;
}

every 10 milliseconds {
	if(!inactive){
		accelerationX = accelerometer.x_axis.read();
		accelerationY = accelerometer.y_axis.read();
		accelerationZ = accelerometer.z_axis.read();
		sd.writer.write(`${accelerationX} ; ${accelerationY} ; ${accelerationZ} \n`);
	}
}

every 200 milliseconds {
	if(!inactive){
		if(orangeBlink){
			if(orangeBlinksRequested > blinkCounter){
				if(!orangeOn){
					led.orange.write(true);
					orangeOn = true;
				}
				else {
					led.orange.write(false);
					orangeOn = false;
					blinkCounter += 1;
				}
			}
			else {
				blinkCounter = 0;
				orangeBlink = false;
				orangeBlinksRequested = 0;
			}
		}
	}
}

native unchecked fn atoi(n : string) : int32
	header "stdlib.h";